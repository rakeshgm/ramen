#!/usr/bin/env python3

# SPDX-FileCopyrightText: The RamenDR authors
# SPDX-License-Identifier: Apache-2.0

import os
import sys

import drenv
from drenv import kubectl

FS_NAMES = ["test-fs1", "test-fs2"]
VOLUME_SNAPSHOT_CLASSES = ["csi-cephfsplugin-snapclass", "csi-cephfsplugin-snapclass-2"]

FILE_SYSTEMS = [
    {"name": FS_NAMES[0], "vsc": VOLUME_SNAPSHOT_CLASSES[0]},
    {"name": FS_NAMES[1], "vsc": VOLUME_SNAPSHOT_CLASSES[1]},
]


def deploy(cluster):
    for file_system in FILE_SYSTEMS:
        print("Creating CephFS instances")
        template = drenv.template("filesystem.yaml")
        yaml = template.substitute(cluster=cluster, name=file_system["name"])
        kubectl.apply("--filename=-", input=yaml, context=cluster)

        print("Creating StorageClasses")
        template = drenv.template("storage-class.yaml")
        yaml = template.substitute(cluster=cluster, fsname=file_system["name"])
        kubectl.apply("--filename=-", input=yaml, context=cluster)

        print("Creating SnapshotClasses")
        template = drenv.template("snapshot-class.yaml")
        yaml = template.substitute(
            cluster=cluster, vscname=file_system["vsc"], fsname=file_system["name"]
        )
        kubectl.apply("--filename=-", input=yaml, context=cluster)


def wait(cluster):
    print("Waiting until Ceph File Systems are ready")

    for fs_name in FS_NAMES:
        drenv.wait_for(
            f"cephfilesystem/{fs_name}",
            output="jsonpath={.status.phase}",
            namespace="rook-ceph",
            timeout=120,
            profile=cluster,
        )
        kubectl.wait(
            f"cephfilesystem/{fs_name}",
            "--for=jsonpath={.status.phase}=Ready",
            "--namespace=rook-ceph",
            "--timeout=300s",
            context=cluster,
        )


if len(sys.argv) != 2:
    print(f"Usage: {sys.argv[0]} cluster")
    sys.exit(1)

os.chdir(os.path.dirname(__file__))
cluster = sys.argv[1]

deploy(cluster)
wait(cluster)
